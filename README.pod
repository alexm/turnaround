=head1 Turnaround

=head2 DESCRIPTION

A Perl web framework that follows TIMTOWTDI motto and modern OOP practices (see
IMPLEMENTATION DETAILS for explanation).

=head2 FOLLOWED PRACTICES

Though nothing is perfect trying to follow best practices make the codebase more
stable, maintainable, modifiable and bug-free.

=over

=item * Decoupled components

No static dependencies. All the compononents are maximally decoupled and don't
depend on each other.  Classes follow single responsibility and open-closed
principles.

=item * Dependency injection

The objects can be replaces by another ones that implement the same interface.

=item * Readability over cleverness

More keystrokes, more newlines, understandable namings, less Perl oneliners and
woodoo. If something needs a comment, it should be refactored.

=item * Simplicity over complexity

The framework follows OOP pagadigm but the design patterns are used only when
absolutely needable and don't confuse a developer. Though the knowledge of them
is required in order to fully understand the source code.

=item * Robustness over Perl magic

As little as possible Perl magic is used. No attribute and constructor
generators, no doubtful speed optimizations and Perl syntax altering.

=item * Most expected behaviour

Method and class namings, their behaviour and combination should be intuitively
understandable without reading documentation.

=item * Testing

Unit testing via L<Test::Class> and functional testing follow the best TDD
practices.

=back

=head2 PROVIDED FUNCTIONALITY

=over

=item * Routes dispatching

Widely common routes dispatching with placeholders, constraints, grouping and
globing support.

=item * Service Container

Service Container is a simple yet powerful Dependency Injection Container that
can hold scalars, objects and factories. The singleton and prototype lifecycles
and automatic dependency resolution are supported.

=item * Input validation

An extandable input validator with message customization.

=item * Persistent DBI connections

Fork-, thread- and ping-aware persistent L<DBI> connections.

=item * Access control lists

ACL component and related middlewares provide role-based authentication and
authorization.

=item * I18N

I18N component and related middlewares provide language detection and
L<Locale::Maketext> integration.

=back

=head2 IMPLEMENTATION DETAILS

The framework follows TIMTOWTDI motto and tries not to force any particular
behaviour with strict design decisions.

=head3 Modern OOP (SOLID, YAGNI, KISS)

No, it's not L<Moose> or derivatives. Modern OOP is someting that evolved from
incapsulation, inheritance and polymorphism to composition, extention but not
modification, Liskov substitution etc. Something that is mentioned only in a few
paragraphs of Modern Perl book.

=head3 PSGI/Plack based

All the HTTP parsing, servers support and various useful utilities are written
by smarter people, backed up by a community, are time-tested and used it
production. This is just a CPAN slug with a few tweaks.

=head3 MVC/MVP/MVVC

Though the framework follows MVC practices the controller can be skippied for
automatic rendering, the model can be a simple Perl hash, and view can fetch the
data from the database. It all depends on the application.

=over

=item * Model is not forced

Is model a database entry or a fully incapsulated business logic starting from
form parsing to template variables generation? It all depends on the application.

=item * Controllers are thin

A controller is just a class with a constructor, a C<run> method and few other
methods for convenience. The thinnest part in MVC.

=item * Templates can be pull or push

The data can be prepared in the controller and pushed to the template or it can
be fetched from the template using helpers. It all depends on the application.

=back

=head3 Middlewares

Since all the applications that are built with the framework are L<Plack> apps
all the L<Plack> middlewares are fully compatible. Moreover all the filter-like
functionality (for example URL dispatching, language detection, default template
rendering etc) is implemented via L<Plack>-like middlewares.

=head3 Scopes

=head4 Application scope

A dependency injection container is used for holding services that should be
available during the application's life-time.

=head4 Request scope

A L<PSGI>'s C<env> is used for the request scope. User object, template
variables, localization handle etc are all saved in C<env>.

=head2 DOCUMENTATION

No documetation or tutorials so far. Read the source code, see tests and
examples. Don't forget about the WARNING paragraph.

=head2 EXAMPLES

=over

=item * Perliki, a wiki engine L<http://github.com/vti/perliki>

=item * http://look2remove.me, an image sharing service
L<http://github.com/vti/look2remove.me>

=back

=head2 WARNING

This is a home made project, no community and/or company support. It hasn't been
used in high traffic and business critical applications. Written for personal
education and research. Provided AS IS.

=head2 WHAT'S IN THE NAME

This is a moving to the different direction, to the opposite from the current
trends.

=head1 AUTHOR

Viacheslav Tykhanovskyi, C<vti@cpan.org>

=head1 COPYRIGHT

Copyright (C) 2011-2012, Viacheslav Tykhanovskyi

This program is free software, you can redistribute it and/or modify it under
the same terms as Perl 5.10.

=cut
